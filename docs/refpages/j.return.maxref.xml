<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--Data marked TEXT_HERE, INLET_TYPE, OUTLET_TYPE, ARG_NAME and ARG_TYPE need to be filled in-->
<c74object name="j.return" module="" category="Jamoma">
	<digest>
		Declares an output node in a Jamoma model
	</digest>
	<description>
		Declares an output node in a Jamoma model, enabling models to generate control data that can be communicated to other the Jamoma nodes. The return value will not be stored as part of the state of the model. Apart from that, <o>j.return</o> resembles <o>j.parameter</o>. 
	</description>
  <discussion>    
    <o>j.return</o> is an output node that enables a model to return values. The return value can be updated immediately, or by easing over time. Common types of returns, such as frequency, can be controlled using several different units (e.g. Hz, midinote or midicent) interchangeably.<br/>
    <br/>
    User interfaces can bind to returns remotely. Mappings enable one return to dynamically control the value of another node.<br/>
    <br/>
    Additionally the return enables inter-application communication. The return node is provided with a unique global OSC address, and returns can be declared on the network in order for other applications, such as i-score, to inspect and control models.
  </discussion>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Jamoma
		</metadata>
		<metadata name="tag">
			model
		</metadata>
		<metadata name="tag">
			mvc
		</metadata>
		<metadata name="tag">
			Jamoma
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Input value
			</digest>
			<description>
				Input value
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="OUTLET_TYPE">
			<digest>
				Value output
			</digest>
			<description>
				Value output
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
    <objarg name="return name" optional="0" type="symbol">
		<!-- ><objarg id="0" name="OBJARG_NAME" type="OBJARG_TYPE" optional="0"> -->
			<digest>
				Node name
			</digest>
			<description>
				Node name.  This is obligatory, and each return within the model must have a unique name.
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Outputs currently stored return value.
			</digest>
			<description>
				Outputs currently stored return value. If the <m>@type</m> is <m>none</m>, a bang will be sent out.
			</description>
		</method>
		<method name="int">
			<arglist>
        <arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Set and output return value
			</digest>
			<description>
				Set and output return value. Depending on the @type, the value might get converted to a float (<m>@type decimal</m> or <m>array</m>) value or a string (<m>@type string</m>). If the <m>@type</m> is <m>none</m>, a bang is sent out.
			</description>
		</method>
		<method name="float">
			<arglist>
        <arg name="input" optional="0" type="float" />
			</arglist>
			<digest>
				Set and output return value
			</digest>
			<description>
				Set and output return value. Depending on the @type, the value might get converted to an integer (<m>@type integer</m>) value or a string (<m>@type string</m>). If the <m>@type</m> is <m>none</m>, a bang is sent out.
			</description>
		</method>
		<method name="list">
			<arglist>
        <arg name="input" optional="0" type="list" />
			</arglist>
			<digest>
				Set and output return value
			</digest>
			<description>
				Set and output return value. If the <m>@type</m> is <m>decimal</m>, <m>integer</m> or <m>string</m>, only the first list member will be used to set the value, and the type of this list member might be converted to fit the specified <m>@type</m> of the return.<br/>
        <br/>
        If the <m>@type</m> is <m>none</m>, a bang is sent out.<br/>
        <br/>
        If the <m>@type</m> is <m>decimal</m>, <m>integer</m> or <m>array</m> and ramping is enabled (as specified by <m>@ramp/funcion</m> and <m>@ramp/drive</m>), the two last list members can be used to request a ramp over time to the new value. If so, the second last list member should be the symbol <m>ramp</m> and the last list member specifies the desired ramp time in milliseconds.<br/>
        <br/>
        If the <m>@type</m> is <m>decimal</m>, <m>integer</m> or <m>array</m> and a dataspace is used (as specifed by <m>@dataspace</m> and <m>@unit</m>), the new value can be set using alternative units. In this case the unit of new value is provided immedeately following the numerical value, as either the last list member or as the third last list member if a ramp is also being requested. If an alternative unit is requested as well as a ramp, the ramping will happen according to the dataspace unit being used temporarily.
			</description>
		</method>
		<method name="address">
			<arglist>
				<arg name="address" type="symbol" optional="0" />
			</arglist>
			<digest>
				Set/change node name
			</digest>
			<description>
				Set/change the name of the node. This replaces the name provided initially as an argument to the object.
			</description>
		</method>
		<method name="+">
			<arglist>
				<arg name="number of steps" optional="1" type="int" />
			</arglist>
			<digest>
				Stepwise increment the return value
			</digest>
			<description>
				Stepwise increment the return value. The step size is controlled by the <m>@stepsize</m> attribute. An integer argument to the return spesifies how many steps to increase the value by. The default is <m>1</m>.
			</description>
		</method>
		<method name="-">
			<arglist>
				<arg name="number of steps" optional="1" type="int" />
			</arglist>
			<digest>
				Stepwise decrement the return value
			</digest>
			<description>
				Stepwise decrement the return value. The step size is controlled by the <m>@stepsize</m> attribute. An integer argument to the return spesifies how many steps to decrease the value by. The default is <m>1</m>.
			</description>
		</method>
		<method name="dec">
			<arglist>
				<arg name="number of steps" optional="1" type="int" />
			</arglist>
			<digest>
				Stepwise decrement the return value
			</digest>
			<description>
				Stepwise decrement the return value. The step size is controlled by the <m>@stepsize</m> attribute. An integer argument to the return spesifies how many steps to decrease the value by. The default is <m>1</m>.
			</description>
		</method>
		<method name="dump">
			<arglist />
			<digest>
				Dump all attribute settings to rightmost outlet
			</digest>
			<description>
				Dump all attribute settings to rightmost outlet.
			</description>
		</method>
		<method name="inc">
			<arglist>
				<arg name="number of steps" optional="1" type="int" />
			</arglist>
			<digest>
				Stepwise increment the return value
			</digest>
			<description>
				Stepwise increment the return value. The step size is controlled by the <m>@stepsize</m> attribute. An integer argument to the return spesifies how many steps to increase the value by. The default is <m>1</m>.
			</description>
		</method>
		<method name="init">
			<arglist />
			<digest>
				Re-initialise the return
			</digest>
			<description>
				Re-initialise the return.
			</description>
		</method>
    <method name="anything">
			<arglist>
				<arg name="input" optional="0" type="list" />
			</arglist>
			<digest>
				If the symbol equals the name of a setable parameter for the current ramp function, the value for that parameter can be updated. Else the message is interpreted as a new value for <o>j.return</o>. Depending on the <m>@type</m> it might be converted to one or more decimals (<m>@type decimal</m> or <m>array</m>), an integer (<m>@type integer</m>) or a bang (<m>@type none</m>).
			</digest>
			<description>
				<!-- TEXT_HERE -->
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="active" get="1" set="1" type="int" size="1">
			<digest>
				Enable return
			</digest>
			<description>
				Enable return
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="clipmode" get="1" set="1" type="symbol" size="1">
			<digest>
				Set how values exceeding range will be clipped
			</digest>
			<description>
				Set how values exceeding range will be clipped. Available clipmodes are <m>none</m>, <m>low</m>, <m>high</m>, <m>both</m>, <m>wrap</m> and <m>fold</m>.
			</description>
		</attribute>
		<attribute name="dataspace" get="1" set="1" type="symbol" size="1">
			<digest>
				Dataspace used by the return
			</digest>
			<description>
				Dataspace used by the return. This enables return values to be updated using several alternative units interchangeably, such as <m>degree</m> and <m>radian</m> for the <m>angle</m> dataspace. Available dataspaces are <m>angle</m>, <m>color</m>, <m>distance</m>, <m>gain</m>, <m>none</m>, <m>orientation</m>, <m>position</m>, <m>speed</m>, <m>temperature</m> and <m>time</m>. The default dataspace is <m>none</m>.
			</description>
		</attribute>
		<attribute name="default" get="1" set="1" type="int" size="1">
			<digest>
				Default value
			</digest>
			<description>
				Default value output by <o>j.return</o> on model initialization.
			</description>
		</attribute>
		<attribute name="description" get="1" set="1" type="symbol" size="1">
			<digest>
				Node description
			</digest>
			<description>
				Description of what this node controls. The description is used when auto-documenting models.
			</description>
		</attribute>
		<attribute name="priority" get="1" set="1" type="int" size="1">
			<digest>
				Set priority
			</digest>
			<description>
				Priority controls in what order several nodes objects within the same model will initialise and update in response to presets and cues. Normally returns are not included in presets, and hence this attribute for <o>j.return</o> has limited relevance.
			</description>
		</attribute>
		<attribute name="ramp/drive" get="1" set="1" type="symbol" size="1">
			<digest>
				Set the scheduler driving the ramp
			</digest>
			<description>
				Set the scheduler driving the ramp: <m>none</m> - no ramping permitted, <m>max</m> - using the Max scheduler, and <m>system</m> - using the system clock. In Max it is recommended to use <m>max</m> rather than <m>system</m>.
			</description>
		</attribute>
		<attribute name="ramp/function" get="1" set="1" type="symbol" size="1">
			<digest>
				Function to be used for ramping
			</digest>
			<description>
				Sets what easing function to use for ramping. A wide range of easing functions as well as windowing functions are available. Please refer to the help file for further details.
			</description>
		</attribute>
		<attribute name="ramp/function/parameters" get="1" set="0" type="atom" size="1">
			<digest>
				Get list of configurable parameters for the current ramp function
			</digest>
			<description>
				Get list of configurable parameters for the current ramp function. Certain ramp functions as specified by the <m>@ramp/function</m> attribute have additional configurable parameters that can be changed dynamically to modify the shape of the ramping curve. The message <m>ramp/function/parameters</m> cause <o>j.return</o> to output a list of all such parameters from the rightmost outlet, prepended by the symbol <m>ramp/function/parameters</m>. Refer to the help file for <o>j.ramp</o> for an overview of what functions have additional configurable parameters.
			</description>
		</attribute>
		<attribute name="ramp/status" get="1" set="0" type="int" size="1">
			<digest>
				Ramp status
			</digest>
			<description>
				Ramp status. THe attribute will be set to <m>1</m> when <o>j.return</o> is currently performing a ramp, and changed to <m>0</m> when done.
			</description>
		</attribute>
		<attribute name="range" get="1" set="1" type="atom" size="1">
			<digest>
				The range of values
			</digest>
			<description>
				The expected range of values for this return. Depending on <m>@clipmode</m> this might be a recommended or definitive range.
			</description>
		</attribute>
		<attribute name="repetitions/filter" get="1" set="1" type="int" size="1">
			<digest>
				Filtering of value repetitions
			</digest>
			<description>
				Set whether to filter out value repetitions (<m>1</m>) or not (<m>0</m>).
			</description>
		</attribute>
		<attribute name="stepsize" get="1" set="1" type="int" size="1">
			<digest>
				Step size when incrementing or decrementing the return value
      </digest>
			<description>
				Stepsize used when incrementing or decrementing the value using one of the returns <m>+</m>, <m>-</m>, <m>inc</m> or <m>dec</m>.
			</description>
		</attribute>
		<!-- <attribute name="service" get="1" set="1" type="symbol" size="1">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</attribute> -->
		<attribute name="tags" get="1" set="1" type="atom" size="1">
			<digest>
				Tags associated with the return
			</digest>
			<description>
				Tags associated with the return. This helps documenting the return, and is also useful when restricting namespace searches usibng <o>j.namespace</o>.
			</description>
		</attribute>
		<attribute name="type" get="1" set="1" type="symbol" size="1">
			<digest>
				Type of the return value
			</digest>
			<description>
				Type of the return value. Permitted types are <m>none</m>, <m>decimal</m>, <m>integer</m>, <m>array</m>, <m>string</m>, <m>generic</m> and <m>boolean</m>.
			</description>
		</attribute>
		<attribute name="unit" get="1" set="1" type="symbol" size="1">
			<digest>
				Dataspace unit used by the return
			</digest>
			<description>
				Dataspace unit used by the return. The return will output values according to this unit.
			</description>
		</attribute>
		<attribute name="value" get="1" set="1" type="int" size="1">
			<digest>
				Current return value
			</digest>
			<description>
				Current return value
			</description>
		</attribute>

	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example caption="" img="" />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="j.message">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.message_array">
			<!-- TEXT_HERE -->
		</seealso>
    <seealso name="j.model">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.node">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.parameter">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.parameter_array">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.receive">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.remote">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.return_array">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.send">
			<!-- TEXT_HERE -->
		</seealso>
	</seealsolist>
</c74object>
