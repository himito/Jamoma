<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--Data marked TEXT_HERE, INLET_TYPE, OUTLET_TYPE, ARG_NAME and ARG_TYPE need to be filled in-->
<c74object name="j.parameter" module="" category="Jamoma">
	<digest>
		Declare a model parameter
	</digest>
	<description>
		Declares a parameter within a model or patch. j.parameter is somewhat similar to the pattr object, while enabling a number of additional features offered by Jamoma.
	</description>
  <discussion>
    The parameter is an acces point for controlling the processing of the patch. The parameter value can be updated immediately, or by easing over time. Common types of parameters, such as frequency, can be controlled using several different units (e.g. Hz, midinote or midicent) interchangeably.<br/>
    <br/>
    The value of the parameter can be stored and recalled using model presets. User interfaces can access the parameter remotely. Mappings enable one parameter dynamically control the value of another parameter. Cues can control all parameters in all models. When designing cues, the value can be queried for every single parameter in the patch.<br/>
    <br/>
    Additionally the parameter enables inter-application communication. The parameter is provided with a unique global OSC address. Parameters can also be declared on the network in order for other applications such as i-score to inspect and control models.
  </discussion>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Jamoma
		</metadata>
		<metadata name="tag">
			model
		</metadata>
		<metadata name="tag">
			mvc
		</metadata>
		<metadata name="tag">
			Jamoma
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Input value
			</digest>
			<description>
				Input value
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="OUTLET_TYPE">
			<digest>
				Value output
			</digest>
			<description>
				Value output
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
    <objarg name="parameter name" optional="0" type="symbol">
			<digest>
				Node name
			</digest>
			<description>
				Node name.  This is obligatory, and each parameter within the model must have a unique name.
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Outputs currently stored parameter value
			</digest>
			<description>
				Outputs currently stored parameter value.
			</description>
		</method>
		<method name="int">
			<arglist>
        <arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Set and output parameter value
			</digest>
			<description>
				Set and output parameter value. Depending on the @type, the value might get converted to a float (<m>@type decimal</m> or <m>array</m>) value or a string (<m>@type string</m>).
			</description>
		</method>
		<method name="float">
			<arglist>
        <arg name="input" optional="0" type="float" />
			</arglist>
			<digest>
				Set and output parameter value
			</digest>
			<description>
				Set and output parameter value. Depending on the @type, the value might get converted to an integer (<m>@type integer</m>) value or a string (<m>@type string</m>).
			</description>
		</method>
		<method name="list">
			<arglist>
        <arg name="input" optional="0" type="list" />
			</arglist>
			<digest>
				Set and output parameter value
			</digest>
			<description>
				Set and output parameter value. If the <m>@type</m> is <m>decimal</m>, <m>integer</m> or <m>string</m>, only the first list member will be used to set the value, and the type of this list member might be converted to fit the specified <m>@type</m> of the parameter.<br/>
        <br/>
        If the <m>@type</m> is <m>decimal</m>, <m>integer</m> or <m>array</m> and ramping is enabled (as specified by <m>@ramp/funcion</m> and <m>@ramp/drive</m>), the two last list members can be used to request a ramp over time to the new value. If so, the second last list member should be the symbol <m>ramp</m> and the last list member specifies the desired ramp time in milliseconds.<br/>
        <br/>
        If the <m>@type</m> is <m>decimal</m>, <m>integer</m> or <m>array</m> and a dataspace is used (as specifed by <m>@dataspace</m> and <m>@unit</m>), the new value can be set using alternative units. In this case the unit of new value is provided immedeately following the numerical value, as either the last list member or as thre third last list member if a ramp is also being requested. If an alternative unit is requested as well as a ramp, the ramping will happen according to the dataspace unit being used temporarily.
			</description>
		</method>
		<method name="address">
			<arglist>
				<arg name="address" type="symbol" optional="0" />
			</arglist>
			<digest>
				Set/change node name
			</digest>
			<description>
				Set/change the name of the node. This replaces the name provided initially as an argument to the object.
			</description>
		</method>
		<method name="+">
			<arglist>
				<arg name="number of steps" optional="1" type="int" />
			</arglist>
			<digest>
				Stepwise increment the parameter value
			</digest>
			<description>
				Stepwise increment the parameter value. The step size is controlled by the <m>@stepsize</m> attribute. An integer argument to the message spesifies how many steps to increase the value by. The default is <m>1</m>.
			</description>
		</method>
		<method name="-">
			<arglist>
				<arg name="number of steps" optional="1" type="int" />
			</arglist>
			<digest>
				Stepwise decrement the parameter value
			</digest>
			<description>
				Stepwise decrement the parameter value. The step size is controlled by the <m>@stepsize</m> attribute. An integer argument to the message spesifies how many steps to decrease the value by. The default is <m>1</m>.
			</description>
		</method>
		<method name="dec">
			<arglist>
				<arg name="number of steps" optional="1" type="int" />
			</arglist>
			<digest>
				Stepwise decrement the parameter value
			</digest>
			<description>
				Stepwise decrement the parameter value. The step size is controlled by the <m>@stepsize</m> attribute. An integer argument to the message spesifies how many steps to decrease the value by. The default is <m>1</m>.
			</description>
		</method>
		<method name="dump">
			<arglist />
			<digest>
				Dump all attribute settings to rightmost outlet
			</digest>
			<description>
				Dump all attribute settings to rightmost outlet.
			</description>
		</method>
		<method name="inc">
			<arglist>
				<arg name="number of steps" optional="1" type="int" />
			</arglist>
			<digest>
				Stepwise increment the parameter value
			</digest>
			<description>
				Stepwise increment the parameter value. The step size is controlled by the <m>@stepsize</m> attribute. An integer argument to the message spesifies how many steps to increase the value by. The default is <m>1</m>.
			</description>
		</method>
		<method name="init">
			<arglist />
			<digest>
				Re-initialise the parameter
			</digest>
			<description>
				Re-initialise the parameter.
			</description>
		</method>
    <method name="anything">
			<arglist>
				<arg name="input" optional="0" type="list" />
			</arglist>
			<digest>
				If the symbol equals the name of a setable parameters for the current ramp function, the value for that parameter can be updated. Else the message is interpreted as a new value for <o>j.parameter</o>. Depending on the <m>@type</m> it might be converted to one or more decimals (<m>@type decimal</m> or <m>array</m>) or an integer (<m>@type integer</m>).
			</digest>
			<description>
				<!-- TEXT_HERE -->
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="active" get="1" set="1" type="int" size="1">
			<digest>
				Enable parameter
			</digest>
			<description>
				Enable parameter
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="clipmode" get="1" set="1" type="symbol" size="1">
			<digest>
				Set how values exceeding range will be clipped
			</digest>
			<description>
				Set how values exceeding range will be clipped. Available clipmodes are <m>none</m>, <m>low</m>, <m>high</m>, <m>both</m>, <m>wrap</m> and <m>fold</m>.
			</description>
		</attribute>
		<attribute name="dataspace" get="1" set="1" type="symbol" size="1">
			<digest>
				Dataspace used by the parameter
			</digest>
			<description>
				Dataspace used by the parameter. This enables parameter values to be updated using several alternative units interchangeably, such as <m>degree</m> and <m>radian</m> for the <m>angle</m> dataspace. Available dataspaces are <m>angle</m>, <m>color</m>, <m>distance</m>, <m>gain</m>, <m>none</m>, <m>orientation</m>, <m>position</m>, <m>speed</m>, <m>temperature</m> and <m>time</m>. The default dataspace is <m>none</m>.
			</description>
		</attribute>
		<attribute name="default" get="1" set="1" type="int" size="1">
			<digest>
				Default value
			</digest>
			<description>
				Default value output by <o>j.parameter</o> on model initialization. The default value can be overridden by the default model preset.
			</description>
		</attribute>
		<attribute name="description" get="1" set="1" type="symbol" size="1">
			<digest>
				Node description
			</digest>
			<description>
				Description of what this node controls. The description is used when auto-documenting models.
			</description>
		</attribute>
		<attribute name="priority" get="1" set="1" type="int" size="1">
			<digest>
				Set priority
			</digest>
			<description>
				Priority controls in what order several <o>j.parameter</o> obejcts within the same model will initialise and update in response to presets and cues.
			</description>
		</attribute>
		<attribute name="ramp/drive" get="1" set="1" type="symbol" size="1">
			<digest>
				Set the scheduler driving the ramp
			</digest>
			<description>
				Set the scheduler driving the ramp: <m>none</m> - no ramping permitted, <m>max</m> - using the Max scheduler, and <m>system</m> - using the system clock. In Max it is recommended to use <m>max</m> rather than <m>system</m>.
			</description>
		</attribute>
		<attribute name="ramp/function" get="1" set="1" type="symbol" size="1">
			<digest>
				Function to be used for ramping
			</digest>
			<description>
				Sets what easing function to use for ramping. A wide range of easing functions as well as windowing functions are available. Please refer to the help file for further details.
			</description>
		</attribute>
		<attribute name="ramp/function/parameters" get="1" set="0" type="atom" size="1">
			<digest>
				Get list of configurable parameters for the current ramp function
			</digest>
			<description>
				Get list of configurable parameters for the current ramp function. Certain ramp functions as specified by the <m>@ramp/function</m> attribute have additional configurable parameters that can be changed dynamically to modify the shape of the ramping curve. The message <m>ramp/function/parameters</m> cause <o>j.parameter</o> to output a list of all such parameters from the rightmost outlet, prepended by the symbol <m>ramp/function/parameters</m>. Refer to the help file for <o>j.ramp</o> for an overview of what functions have additional configurable parameters.
			</description>
		</attribute>
		<attribute name="ramp/status" get="1" set="0" type="int" size="1">
			<digest>
				Ramp status
			</digest>
			<description>
				Ramp status. THe attribute will be set to <m>1</m> when <o>j.parameter</o> is currently performing a ramp, and changed to <m>0</m> when done.
			</description>
		</attribute>
		<attribute name="range" get="1" set="1" type="atom" size="1">
			<digest>
				The range of values
			</digest>
			<description>
				The expected range of values for this parameter. Depending on <m>@clipmode</m> this might be a recommended or definitive range.
			</description>
		</attribute>
		<attribute name="repetitions/filter" get="1" set="1" type="int" size="1">
			<digest>
				Filtering of value repetitions
			</digest>
			<description>
				Set whether to filter out value repetitions (<m>1</m>) or not (<m>0</m>).
			</description>
		</attribute>
		<attribute name="stepsize" get="1" set="1" type="int" size="1">
			<digest>
				Step size when incrementing or decrementing the parameter value
      </digest>
			<description>
				Stepsize used when incrementing or decrementing the value using one of the messages <m>+</m>, <m>-</m>, <m>inc</m> or <m>dec</m>.
			</description>
		</attribute>
		<!-- <attribute name="service" get="1" set="1" type="symbol" size="1">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</attribute> -->
		<attribute name="tags" get="1" set="1" type="atom" size="1">
			<digest>
				Tags associated with the parameter
			</digest>
			<description>
				Tags associated with the parameter. This helps documenting the parameter, and is also useful when restricting namespace searches usibng <o>j.namespace</o>.
			</description>
		</attribute>
		<attribute name="type" get="1" set="1" type="symbol" size="1">
			<digest>
				Type of the parameter value
			</digest>
			<description>
				Type of the parameter value. Permitted types are <m>decimal</m>, <m>integer</m>, <m>array</m>, <m>string</m>, <m>generic</m> and <m>boolean</m>.
			</description>
		</attribute>
		<attribute name="unit" get="1" set="1" type="symbol" size="1">
			<digest>
				Dataspace unit used by the parameter
			</digest>
			<description>
				Dataspace unit used by the parameter. The parameter will output values according to this unit.
			</description>
		</attribute>
		<attribute name="value" get="1" set="1" type="int" size="1">
			<digest>
				Current parameter value
			</digest>
			<description>
				Current parameter value
			</description>
		</attribute>

	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example caption="" img="" />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="j.message">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.message_array">
			<!-- TEXT_HERE -->
		</seealso>
    <seealso name="j.model">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.node">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.parameter_array">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.receive">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.remote">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.return">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.return_array">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.send">
			<!-- TEXT_HERE -->
		</seealso>
	</seealsolist>
</c74object>
