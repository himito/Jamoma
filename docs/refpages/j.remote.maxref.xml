<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--Data marked TEXT_HERE, INLET_TYPE, OUTLET_TYPE, ARG_NAME and ARG_TYPE need to be filled in-->
<c74object name="j.remote" module="" category="Jamoma">
	<digest>
		Access parameter values remotely
	</digest>
	<description>
		<o>j.remote</o> allows access to parameter values remotely. This way views (user interfaces) can be separated from, and developed independently of, their underlying model.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Jamoma
		</metadata>
		<metadata name="tag">
			Jamoma
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				input
			</digest>
			<description>
				Messages will be forwarded to the associated node. This inlet can also be used to change the address that determines what node the object will bind to.
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="OUTLET_TYPE">
			<digest>
				Node value with <m>set</m> prepended
			</digest>
			<description>
				This outlet is intended to be connecting to the GUI widget in the view. Whenever the value of the associated node (e.g. <o>j.parameter</o>) change, the updated value is output, with the message <m>set</m> prepended. If the value of the node change several times in rapid succession, the output from this outlet will be thinned out, in order to reduce overhead resulting from updating and redrawing GUI elements.<br /><br />
        Additionally the <m>annotation</m> attribute of the GUI object will be updated with the content of the <m>@description</m> tag in the associated j.parameter object, providing additional cues as to what parameter the GUI widget interacts with.
			</description>
		</outlet>
		<outlet id="1" type="OUTLET_TYPE">
			<digest>
				Node value
			</digest>
			<description>
				Whenever the value of the associated node (e.g. <o>j.parameter</o>) change, the updated value is passed from the 2nd outlet.
			</description>
		</outlet>
		<outlet id="2" type="OUTLET_TYPE">
			<digest>
				Set highlight attribute
			</digest>
			<description>
				If the leftmost outlet of this object is not connected directly to a GUI object, but have other objects intercepting inbetween, the third outlet can be connected directly to the GUI object. When <o>j.remote</o> binds to a node, this outlet will set the <m>annotation</m> attribtue of the GUI widget to the content of the <m>@description</m> tag in the associated j.parameter object, providing additional cues as to what parameter the GUI widget interacts with.
			</description>
		</outlet>
		<outlet id="3" type="OUTLET_TYPE">
			<digest>
				dumpout
			</digest>
			<description>
				When <o>j.remote</o> receives a <m>dump</m> message, the current value of all attributes of the associated node will be dumped from this outlet.
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg id="0" name="target node address" type="symbol" optional="1">
			<digest>
				Address of associated node
			</digest>
			<description>
				Address of the node that <o>j.remote</o> will listen to. If no argument is provided, the object will not be subscribing to any node initially.
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Forwarded to the associated node
			</digest>
			<description>
				A <m>bang</m> is forwarded to the associated node, and the node will respond in the same way as if it received a <m>bang</m> directy.
			</description>
		</method>
		<method name="int">
			<arglist>
				<arg name="ARG_NAME_0" type="int" optional="0" />
			</arglist>
			<digest>
				Forwarded to the associated node
			</digest>
			<description>
				An integer is forwarded to the associated node, and the node will respond in the same way as if it received an <m>int</m> directy.
			</description>
		</method>
		<method name="float">
			<arglist>
				<arg name="ARG_NAME_0" type="float" optional="0" />
			</arglist>
			<digest>
				Forwarded to the associated node
			</digest>
			<description>
				A decimal nunber is forwarded to the associated node, and the node will respond in the same way as if it received a <m>float</m> directy.
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Forwarded to the associated node
			</digest>
			<description>
				A list is forwarded to the associated node, and the node will respond in the same way as if it received the list directy.
			</description>
		</method>
		<method name="anything">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Forwarded to the associated node
			</digest>
			<description>
				The message is forwarded to the associated node, and the node will respond in the same way as if it received the message directy.
			</description>
		</method>
		<method name="address">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Target node address
			</digest>
			<description>
				The message <m>address</m> followed by an absolute or relative address set the target address.
			</description>
		</method>
		<method name="set">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Forwarded to the associated node
			</digest>
			<description>
				The message is forwarded to the associated node, and the node will respond in the same way as if it received the message directy.
			</description>
		</method>
		<method name="dump">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Get state of associated node
			</digest>
			<description>
				The message <m>dumb</m> will output the current value of all attributes for the associated node.
			</description>
		</method>
		<method name="(mouse)">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="active" get="1" set="1" type="int" size="1">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="address" get="1" set="1" type="symbol" size="1">
			<digest>
				Address of associated node
			</digest>
			<description>
				This sets the address of the associated node that the object will bind to and forward values to. The address can be <em>absolute</em> and take the form of an OSC address, or <em>relative</em>, in which case the relative address is appended to the address of the <o>j.model</o> or <o>j.view</o> object in the model or view that this <o>j.send</o> object is part of.
			</description>
		</attribute>
		<attribute name="unit" get="1" set="1" type="symbol" size="1">
			<digest>
				Dataspace unit
			</digest>
			<description>
				If the associated node makes use of a dataspace, enabling parameter values to be expressed using several interchangeable units, this attribute determines what unit will be used by this <o>j.remote</o>. Messages received by <o>j.remote</o> will be interpreted as expressed in this unit, and node values returned from the two leftmost outlets are converted to this unit. If no unit is set, <o>j.remote</o> will use the same unit as that of the associated node.
			</description>
		</attribute>
		<attribute name="freeze" get="1" set="1" type="int" size="1">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="highlight" get="1" set="1" type="int" size="1">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
			<attributelist>
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example caption="" img="" />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="j.message">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.message_array">
			<!-- TEXT_HERE -->
		</seealso>
    <seealso name="j.model">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.node">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.parameter">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.parameter_array">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.receive">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.receive~">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.return">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.return_array">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.send">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.send~">
			<!-- TEXT_HERE -->
		</seealso>
		<seealso name="j.view">
			<!-- TEXT_HERE -->
		</seealso>
	</seealsolist>
</c74object>
